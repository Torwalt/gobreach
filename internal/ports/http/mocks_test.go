package http_test
// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/http/breach/handlers.go

// Package mock_http is a generated GoMock package.

import (
	breach "gobreach/internal/domains/breach"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBreachServer is a mock of BreachServer interface.
type MockBreachServer struct {
	ctrl     *gomock.Controller
	recorder *MockBreachServerMockRecorder
}

// MockBreachServerMockRecorder is the mock recorder for MockBreachServer.
type MockBreachServerMockRecorder struct {
	mock *MockBreachServer
}

// NewMockBreachServer creates a new mock instance.
func NewMockBreachServer(ctrl *gomock.Controller) *MockBreachServer {
	mock := &MockBreachServer{ctrl: ctrl}
	mock.recorder = &MockBreachServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBreachServer) EXPECT() *MockBreachServerMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockBreachServer) GetByEmail(email string) ([]breach.Breach, *breach.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].([]breach.Breach)
	ret1, _ := ret[1].(*breach.Error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockBreachServerMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockBreachServer)(nil).GetByEmail), email)
}
