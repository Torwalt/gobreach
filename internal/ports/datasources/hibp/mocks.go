// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/datasources/hibp/client.go

// Package mock_hibp is a generated GoMock package.
package hibp

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHttpGetter is a mock of HttpGetter interface.
type MockHttpGetter struct {
	ctrl     *gomock.Controller
	recorder *MockHttpGetterMockRecorder
}

// MockHttpGetterMockRecorder is the mock recorder for MockHttpGetter.
type MockHttpGetterMockRecorder struct {
	mock *MockHttpGetter
}

// NewMockHttpGetter creates a new mock instance.
func NewMockHttpGetter(ctrl *gomock.Controller) *MockHttpGetter {
	mock := &MockHttpGetter{ctrl: ctrl}
	mock.recorder = &MockHttpGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpGetter) EXPECT() *MockHttpGetterMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpGetter) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpGetterMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpGetter)(nil).Do), req)
}
